[{"/Users/jerry/Desktop/CS396-PetsFinder/client/src/index.js":"1","/Users/jerry/Desktop/CS396-PetsFinder/client/src/reportWebVitals.js":"2","/Users/jerry/Desktop/CS396-PetsFinder/client/src/frontend/component/App.js":"3","/Users/jerry/Desktop/CS396-PetsFinder/client/src/frontend/component/NavBar.js":"4","/Users/jerry/Desktop/CS396-PetsFinder/client/src/frontend/component/Community.js":"5","/Users/jerry/Desktop/CS396-PetsFinder/client/src/frontend/component/ListPet.js":"6","/Users/jerry/Desktop/CS396-PetsFinder/client/src/frontend/component/Footer.js":"7","/Users/jerry/Desktop/CS396-PetsFinder/client/src/frontend/component/history.js":"8","/Users/jerry/Desktop/CS396-PetsFinder/client/src/frontend/component/SearchResult.js":"9","/Users/jerry/Desktop/CS396-PetsFinder/client/src/frontend/component/Home.js":"10","/Users/jerry/Desktop/CS396-PetsFinder/client/src/frontend/component/PetDetail.js":"11","/Users/jerry/Desktop/CS396-PetsFinder/client/src/frontend/component/Pet.js":"12","/Users/jerry/Desktop/CS396-PetsFinder/client/src/frontend/component/DropdownOptions.js":"13","/Users/jerry/Desktop/CS396-PetsFinder/client/src/frontend/component/SearchBox.js":"14","/Users/jerry/Desktop/CS396-PetsFinder/client/src/frontend/component/CheckBox.js":"15","/Users/jerry/Desktop/CS396-PetsFinder/client/src/firebase/firebase.js":"16"},{"size":519,"mtime":1623040484718,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1623040484719,"results":"19","hashOfConfig":"18"},{"size":882,"mtime":1623040484716,"results":"20","hashOfConfig":"18"},{"size":599,"mtime":1623040484716,"results":"21","hashOfConfig":"18"},{"size":7454,"mtime":1623040484716,"results":"22","hashOfConfig":"18"},{"size":11384,"mtime":1623040484716,"results":"23","hashOfConfig":"18"},{"size":499,"mtime":1623040484716,"results":"24","hashOfConfig":"18"},{"size":102,"mtime":1623040484717,"results":"25","hashOfConfig":"18"},{"size":10047,"mtime":1623040484717,"results":"26","hashOfConfig":"18"},{"size":5956,"mtime":1623040484716,"results":"27","hashOfConfig":"18"},{"size":2108,"mtime":1623040484717,"results":"28","hashOfConfig":"18"},{"size":1228,"mtime":1623040484717,"results":"29","hashOfConfig":"18"},{"size":18903,"mtime":1623040484716,"results":"30","hashOfConfig":"18"},{"size":1846,"mtime":1623040484717,"results":"31","hashOfConfig":"18"},{"size":420,"mtime":1623040484716,"results":"32","hashOfConfig":"18"},{"size":553,"mtime":1623040484706,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1awk8uj",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jerry/Desktop/CS396-PetsFinder/client/src/index.js",[],"/Users/jerry/Desktop/CS396-PetsFinder/client/src/reportWebVitals.js",[],"/Users/jerry/Desktop/CS396-PetsFinder/client/src/frontend/component/App.js",[],"/Users/jerry/Desktop/CS396-PetsFinder/client/src/frontend/component/NavBar.js",[],"/Users/jerry/Desktop/CS396-PetsFinder/client/src/frontend/component/Community.js",["70","71"],"import React, {Component} from 'react';\nimport Pet from './Pet';\nimport { Button, Radio, Dropdown } from \"semantic-ui-react\";\nimport history from './history';\nimport CheckBox from './CheckBox';\nimport { sortOption } from './DropdownOptions';\n\nimport '../styles/Community.css';\n\nconst parseQueryParameter = q => {\n    if (q === \"\")\n        return {}\n\n    let qs = q.replace(\"?\", \"\").split(\"&\")\n    let params = {}\n\n    qs.forEach(param => {\n        param = param.split(\"=\")\n        \n        if (param[1] !== \"\") {\n            params[param[0]] = param[1].replaceAll(\"%20\", \" \")\n        }\n        \n    });\n\n    return params\n}\n\nconst joinQueryParameter = params => {\n    let res = \"?\"\n\n    for (let [key, value] of Object.entries(params)) {\n        res += key + \"=\" + value + \"&\"\n    }\n\n    return res.slice(0, -1)\n}\n\nclass Community extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pets: [],\n            curpets: [],\n            sex: '',\n            price: '',\n            ranges: [\n                { id: 1, min: 0, max: 100, isChecked: false, value: \"Under $100.00\", arr: [] },\n                { id: 2, min: 100, max: 500, isChecked: false, value: \"$100.00 to $500.00\", arr: [] },\n                { id: 3, min: 500, max: 1000, isChecked: false, value: \"$500.00 to $1000.00\", arr: [] },\n                { id: 4, min: 1000, max: 1500, isChecked: false, value: \"$1000.00 to $1500.00\", arr: [] },\n                { id: 5, min: 1500, max: 3000, isChecked: false, value: \"$1500.00 to $3000.00\", arr: [] },\n                { id: 6, min: 3000, max: 1000000000, isChecked: false, value: \"Above $3000.00\", arr: [] }\n            ]\n        }\n    }\n\n    componentDidMount() {\n        this.fetchPets([]) // fetch all pets\n    }\n\n    fetchPets = (params) => {\n        fetch(\"http://localhost:8081/filterpet\", {\n            method: 'POST',\n            body: JSON.stringify(params),\n            headers: {\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': '*',\n                'Access-Control-Allow-Methods': 'POST, GET, OPTIONS, PUT, DELETE',\n            }\n        })\n        .then(async response => {\n            let data = await response.json()\n            if (response.status === 404) {\n                this.setState({err: data.message});\n            } else if (response.status === 200) {\n                this.state.ranges.map((range) => {\n                    const res = data.filter(pet => pet.price >= range.min && pet.price < range.max);\n                    range.arr = res;\n                })\n                this.setState({pets: data});\n                this.setState({curpets: data});\n            }\n        })\n        .catch(err => {\n            this.setState({err: err.message});\n        })\n    }\n\n    handleSexChange = (e, { value }) => {\n        this.setState({sex: value});\n        let params = parseQueryParameter(this.props.location.search)\n        params['sex'] = value\n        this.props.history.push(this.props.location.pathname + joinQueryParameter(params))\n        this.fetchPets(params)\n    }\n\n    uncheck = (e) => {\n        this.setState({sex: ''});\n        let params = parseQueryParameter(this.props.location.search)\n        delete params['sex'];\n        this.props.history.push(this.props.location.pathname + joinQueryParameter(params))\n        this.fetchPets(params)\n    }\n\n    toggle = (event) => {\n        let ranges = this.state.ranges\n        let queryRange = []\n        ranges.forEach(range => {\n            if (range.value === event.target.value) {\n                range.isChecked =  event.target.checked\n            }\n            if (range.isChecked) {\n                queryRange.push(range.min + \"-\" + range.max)\n            }\n        })\n        this.setState({ranges: ranges})\n\n        let params = parseQueryParameter(this.props.location.search)\n        delete params['price']\n        if (queryRange.length !== 0)\n            params['price'] = queryRange.join(\",\")\n        this.props.history.push(this.props.location.pathname + joinQueryParameter(params))\n        this.fetchPets(params)\n    }\n    \n    handleSort = (value) => {\n        let array = this.state.curpets;\n        if (value === \"ascending\") {\n            array.sort((a, b) => a.price > b.price ? 1 : -1);\n        } else if (value === \"descending\") {\n            array.sort((a, b) => a.price > b.price ? -1 : 1);\n        }\n        this.setState({curpets: array});\n    }\n\n    render() {\n        let pets = this.state.curpets;\n        \n        return (\n            <>\n                {\n                    pets.length === 0 ? (\n                        <div id=\"smallest-page-container\">\n                            <div class=\"search-result-container err\">Sorry, there is no matching pet available!</div>\n                        </div>\n                    ) : (\n                        <div id=\"smallest-page-container\">\n                            <div class=\"search-result-container result\">\n                                <div id=\"filter-section\">\n                                    <h3>Select the Price Range</h3>\n                                    <div className=\"price-checkbox\">\n                                        {\n                                            this.state.ranges.map((range) => {\n                                                return (<CheckBox toggle={this.toggle} range={range}/>)\n                                            })\n                                        }\n                                    </div>\n\n                                    <h3>Choose the Sex</h3>\n                                    <Radio\n                                        label='Male'\n                                        name='radioGroup'\n                                        value='Male'\n                                        onChange={this.handleSexChange}\n                                        checked={this.state.sex === 'Male'}\n                                    /><br/>\n                                    <Radio\n                                        label='Female'\n                                        name='radioGroup'\n                                        value='Female'\n                                        onChange={this.handleSexChange}\n                                        checked={this.state.sex === 'Female'}\n                                    /><br/><br/>\n                                    <div>\n                                        <Button onClick={this.uncheck}>Clear Sex</Button>\n                                    </div>\n                                    <h3>Sort Price</h3>\n                                    <Dropdown\n                                            onChange={(e, {value}) => this.handleSort(value)}\n                                            placeholder=\"Sort\"\n                                            selection\n                                            options={sortOption}\n                                        />\n                                </div>\n                                <div id=\"search-result-section\">\n                                    {pets.map((pet) => (\n                                        <Pet pet={pet}/>\n                                    ))}\n                                </div>\n                            </div>\n                        </div>\n                    )\n                }\n            </>\n        )\n    }\n}\n\nexport default Community;","/Users/jerry/Desktop/CS396-PetsFinder/client/src/frontend/component/ListPet.js",[],"/Users/jerry/Desktop/CS396-PetsFinder/client/src/frontend/component/Footer.js",[],"/Users/jerry/Desktop/CS396-PetsFinder/client/src/frontend/component/history.js",[],"/Users/jerry/Desktop/CS396-PetsFinder/client/src/frontend/component/SearchResult.js",["72","73","74","75","76","77","78","79","80","81"],"import React, {Component} from 'react';\nimport '../styles/SearchResult.css'\nimport { Button, Dropdown, Radio } from \"semantic-ui-react\";\nimport Pet from './Pet';\nimport history from './history';\nimport CheckBox from './CheckBox';\nimport { sortOption } from './DropdownOptions';\n\n\nconst parseQueryParameter = q => {\n    let qs = q.replace(\"?\", \"\").split(\"&\")\n    let params = {}\n\n    qs.forEach(param => {\n        param = param.split(\"=\")\n        \n        if (param[1] !== \"\") {\n            params[param[0]] = param[1].replaceAll(\"%20\", \" \")\n        }\n        \n    });\n\n    return params\n}\n\nconst joinQueryParameter = params => {\n    let res = \"?\"\n\n    for (let [key, value] of Object.entries(params)) {\n        res += key + \"=\" + value + \"&\"\n    }\n\n    return res.slice(0, -1)\n}\n\nclass SearchResult extends Component {\n    constructor() {\n        super();\n        this.state = {\n            pets: [],\n            curpets: [],\n            sex: '',\n            price: '',\n            species: '',\n            breed: '',\n            location: '',\n            ranges: [\n                { id: 1, min: 0, max: 100, isChecked: false, value: \"Under $100.00\", arr: [] },\n                { id: 2, min: 100, max: 500, isChecked: false, value: \"$100.00 to $500.00\", arr: [] },\n                { id: 3, min: 500, max: 1000, isChecked: false, value: \"$500.00 to $1000.00\", arr: [] },\n                { id: 4, min: 1000, max: 1500, isChecked: false, value: \"$1000.00 to $1500.00\", arr: [] },\n                { id: 5, min: 1500, max: 3000, isChecked: false, value: \"$1500.00 to $3000.00\", arr: [] },\n                { id: 6, min: 3000, max: 9999, isChecked: false, value: \"Above $3000.00\", arr: [] }\n            ]\n        }\n    }\n    \n    componentDidMount() {\n        if (this.props.location.state === undefined) {\n            console.log(\"search from the home page\");\n\n            let params = parseQueryParameter(this.props.location.search)\n \n            if (params.species !== undefined) {\n                this.state.species = params.species;\n            }\n            if (params.breed !== undefined) {\n                this.state.breed = params.breed;\n            }\n            if (params.location !== undefined) {\n                this.state.location = params.location;\n            }\n            if (params.sex !== undefined) {\n                this.state.sex = params.sex;\n            }\n            if (params.price !== undefined) {\n                let queryPrice = params.price.split(\",\")\n                let ranges = this.state.ranges\n\n                for (let i = 0; i < queryPrice.length; i++) {\n                    let [currMin, currMax] = queryPrice[i].split(\"-\")\n\n                    for (let j = 0; j < ranges.length; j++) {\n                        if (parseInt(currMin) === ranges[j].min && parseInt(currMax) === ranges[j].max) {\n                            ranges[j].isChecked = true\n                        }\n                    }\n                }\n\n                console.log(ranges)\n                \n                this.setState({ranges: ranges})\n            }\n            \n            this.fetchPets(params)\n\n        } else {\n            console.log(\"passed state are: \", this.props.location.state);\n            let params = parseQueryParameter(this.props.location.search)\n            console.log(\"here is the params\", params);\n            if (params.species !== undefined) {\n                this.state.species = params.species;\n            }\n            if (params.breed !== undefined) {\n                this.state.breed = params.breed;\n            }\n            if (params.location !== undefined) {\n                this.state.location = params.location;\n            }\n            if (params.sex !== undefined) {\n                this.state.sex = params.sex;\n            }\n            this.setState({pets: this.props.location.state.allpets})\n            this.setState({curpets: this.props.location.state.curpets});\n            this.setState({ranges: this.props.location.state.ranges});\n            console.log(\"allpets are: \", this.props.location.state.allpets);\n            console.log(\"curpets are: \", this.props.location.state.curpets);\n            console.log(\"ranges are: \", this.props.location.state.ranges);\n        }\n    }\n\n    fetchPets = (params) => {\n        fetch(\"http://localhost:8081/filterpet\", {\n            method: 'POST',\n            body: JSON.stringify(params),\n            headers: {\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': '*',\n                'Access-Control-Allow-Methods': 'POST, GET, OPTIONS, PUT, DELETE',\n            }\n        })\n        .then(async response => {\n            let data = await response.json()\n            if (response.status === 404) {\n                this.setState({err: data.message});\n            } else if (response.status === 200) {\n                this.state.ranges.map((range) => {\n                    const res = data.filter(pet => pet.price >= range.min && pet.price < range.max);\n                    range.arr = res;\n                })\n                this.setState({pets: data});\n                this.setState({curpets: data});\n            }\n        })\n        .catch(err => {\n            this.setState({err: err.message});\n        })\n    }\n\n    handleSexChange = (e, { value }) => {\n        this.setState({sex: value});\n        let params = parseQueryParameter(this.props.location.search)\n        params['sex'] = value\n        this.props.history.push(this.props.location.pathname + joinQueryParameter(params))\n        this.fetchPets(params)\n    }\n\n    uncheck = (e) => {\n        this.setState({sex: ''});\n        let params = parseQueryParameter(this.props.location.search)\n        delete params['sex'];\n        this.props.history.push(this.props.location.pathname + joinQueryParameter(params))\n        this.fetchPets(params)\n    }\n\n    toggle = (event) => {\n        let ranges = this.state.ranges\n        let queryRange = []\n        ranges.forEach(range => {\n            if (range.value === event.target.value) {\n                range.isChecked =  event.target.checked\n            }\n            if (range.isChecked) {\n                queryRange.push(range.min + \"-\" + range.max)\n            }\n        })\n        this.setState({ranges: ranges})\n\n        let params = parseQueryParameter(this.props.location.search)\n        delete params['price']\n        if (queryRange.length !== 0)\n            params['price'] = queryRange.join(\",\")\n        this.props.history.push(this.props.location.pathname + joinQueryParameter(params))\n        this.fetchPets(params)\n    }\n\n    handleSort = (value) => {\n        let array = this.state.curpets;\n        if (value === \"ascending\") {\n            array.sort((a, b) => a.price > b.price ? 1 : -1);\n        } else if (value === \"descending\") {\n            array.sort((a, b) => a.price > b.price ? -1 : 1);\n        }\n        this.setState({curpets: array});\n    }\n\n    render() {\n        let pets = this.state.curpets;\n        return (\n            <>\n                {\n                    pets.length === 0 ? (\n                        <div id=\"smallest-page-container\">\n                            <div className=\"search-result-container err\">Sorry, there is no matching pet available!</div>\n                        </div>\n                    ) : (\n                        <div id=\"smallest-page-container\">\n                            <div className=\"search-result-container result\">\n                                <div id=\"filter-section\">\n                                    <h3>Select the Price Range</h3>\n                                    <div className=\"price-checkbox\">\n                                        {\n                                            this.state.ranges.map((range) => {\n                                                return (<CheckBox toggle={this.toggle} range={range}/>)\n                                            })\n                                        }\n                                    </div>\n\n                                    <h3>Choose the Sex</h3>\n                                    <Radio\n                                        label='Male'\n                                        name='radioGroup'\n                                        value='Male'\n                                        onChange={this.handleSexChange}\n                                        checked={this.state.sex === 'Male'}\n                                    /><br/>\n                                    <Radio\n                                        label='Female'\n                                        name='radioGroup'\n                                        value='Female'\n                                        onChange={this.handleSexChange}\n                                        checked={this.state.sex === 'Female'}\n                                    /><br/><br/>\n                                    <div>\n                                        <Button onClick={this.uncheck}> Clear Sex </Button>\n                                    </div>\n                                    <h3>Sort Price</h3>\n                                    <div>\n                                        <Dropdown\n                                            onChange={(e, {value}) => this.handleSort(value)}\n                                            placeholder=\"Sort\"\n                                            selection\n                                            options={sortOption}\n                                        />\n                                    </div>\n                                \n                                </div>\n\n\n                                <div id=\"search-result-section\">\n                                    {pets.map((pet) => (\n                                        <Pet pet={pet}/>\n                                    ))}\n                                </div>\n                            </div>\n                        </div>\n                    )\n                }\n            </>\n        )\n    }\n}\n\nexport default SearchResult;","/Users/jerry/Desktop/CS396-PetsFinder/client/src/frontend/component/Home.js",[],"/Users/jerry/Desktop/CS396-PetsFinder/client/src/frontend/component/PetDetail.js",[],"/Users/jerry/Desktop/CS396-PetsFinder/client/src/frontend/component/Pet.js",[],"/Users/jerry/Desktop/CS396-PetsFinder/client/src/frontend/component/DropdownOptions.js",["82"],"import React from 'react';\n\nexport const genderOption = [\n  { key: 'Male', text: 'Male', value: 'Male' },\n  { key: 'Female', text: 'Female', value: 'Female' },\n]\n\nexport const speciesOption = [\n  { key: 'Cat', text: 'Cat', value: 'Cat' },\n  { key: 'Dog', text: 'Dog', value: 'Dog' },\n  { key: 'Rabbit', text: 'Rabbit', value: 'Rabbit' },\n  { key: 'Hamster', text: 'Hamster', value: 'Hamster' },\n  { key: 'Bird', text: 'Bird', value: 'Bird' },\n  { key: 'Guinea Pig', text: 'Guinea Pig', value: 'Guinea Pig' },\n]\n\nexport const sortOption = [\n  { key: \"Price: Low to High\", text: \"Price: Low to High\", value: \"ascending\" },\n  { key: \"Price: High to Low\", text: \"Price: High to Low\", value: \"descending\" }\n]\n\nexport const locationOption = [\n  {key: \"Alabama\", text: \"Alabama\", value: \"Alabama\"},\n  {key: \"Alaska\", text: \"Alaska\", value: \"Alaska\"},\n  {key: \"Arizona\", text: \"Arizona\", value: \"Arizona\"},\n  {key: \"Arkansas\", text: \"Arkansas\", value: \"Arkansas\"},\n  {key: \"California\", text: \"California\", value: \"California\"},\n  {key: \"Colorado\", text: \"Colorado\", value: \"Colorado\"},\n  {key: \"Connecticut\", text: \"Connecticut\", value: \"Connecticut\"},\n  {key: \"Delaware\", text: \"Delaware\", value: \"Delaware\"},\n  {key: \"District of Columbia\", text: \"District of Columbia\", value: \"District of Columbia\"},\n  {key: \"Florida\", text: \"Florida\", value: \"Florida\"},\n  {key: \"Georgia\", text: \"Georgia\", value: \"Georgia\"},\n  {key: \"Hawaii\", text: \"Hawaii\", value: \"Hawaii\"},\n  {key: \"Idaho\", text: \"Idaho\", value: \"Idaho\"},\n  {key: \"Illinois\", text: \"Illinois\", value: \"Illinois\"},\n  {key: \"Indiana\", text: \"Indiana\", value: \"Indiana\"},\n  {key: \"Iowa\", text: \"Iowa\", value: \"Iowa\"},\n  {key: \"Kansas\", text: \"Kansas\", value: \"Kansas\"},\n  {key: \"Kentucky\", text: \"Kentucky\", value: \"Kentucky\"},\n  {key: \"Louisiana\", text: \"Louisiana\", value: \"Louisiana\"},\n  {key: \"Maine\", text: \"Maine\", value: \"Maine\"},\n  {key: \"Maryland\", text: \"Maryland\", value: \"Maryland\"},\n  {key: \"Massachusetts\", text: \"Massachusetts\", value: \"Massachusetts\"},\n  {key: \"Michigan\", text: \"Michigan\", value: \"Michigan\"},\n  {key: \"Minnesota\", text: \"Minnesota\", value: \"Minnesota\"},\n  {key: \"Mississippi\", text: \"Mississippi\", value: \"Mississippi\"},\n  {key: \"Missouri\", text: \"Missouri\", value: \"Missouri\"},\n  {key: \"Montana\", text: \"Montana\", value: \"Montana\"},\n  {key: \"Nebraska\", text: \"Nebraska\", value: \"Nebraska\"},\n  {key: \"Nevada\", text: \"Nevada\", value: \"Nevada\"},\n  {key: \"New Hampshire\", text: \"New Hampshire\", value: \"New Hampshire\"},\n  {key: \"New Jersey\", text: \"New Jersey\", value: \"New Jersey\"},\n  {key: \"New Mexico\", text: \"New Mexico\", value: \"New Mexico\"},\n  {key: \"New York\", text: \"New York\", value: \"New York\"},\n  {key: \"North Carolina\", text: \"North Carolina\", value: \"North Carolina\"},\n  {key: \"North Dakota\", text: \"North Dakota\", value: \"North Dakota\"},\n  {key: \"Ohio\", text: \"Ohio\", value: \"Ohio\"},\n  {key: \"Oklahoma\", text: \"Oklahoma\", value: \"Oklahoma\"},\n  {key: \"Oregon\", text: \"Oregon\", value: \"Oregon\"},\n  {key: \"Pennsylvania\", text: \"Pennsylvania\", value: \"Pennsylvania\"},\n  {key: \"Rhode Island\", text: \"Rhode Island\", value: \"Rhode Island\"},\n  {key: \"South Carolina\", text: \"South Carolina\", value: \"South Carolina\"},\n  {key: \"South Dakota\", text: \"South Dakota\", value: \"South Dakota\"},\n  {key: \"Tennessee\", text: \"Tennessee\", value: \"Tennessee\"},\n  {key: \"Texas\", text: \"Texas\", value: \"Texas\"},\n  {key: \"Utah\", text: \"Utah\", value: \"Utah\"},\n  {key: \"Vermont\", text: \"Vermont\", value: \"Vermont\"},\n  {key: \"Virginia\", text: \"Virginia\", value: \"Virginia\"},\n  {key: \"Washington\", text: \"Washington\", value: \"Washington\"},\n  {key: \"West Virginia\", text: \"West Virginia\", value: \"West Virginia\"},\n  {key: \"Wisconsin\", text: \"Wisconsin\", value: \"Wisconsin\"},\n  {key: \"Wyoming\", text: \"Wyoming\", value: \"Wyoming\"},\n]\n\nexport const catBreedOption = [\n  { key: 'Abyssinian', text: 'Abyssinian', value: 'Abyssinian' },\n  { key: 'American Bobtail', text: 'American Bobtail', value: 'American Bobtail' },\n  { key: 'American Curl', text: 'American Curl', value: 'American Curl' },\n  { key: 'American Shorthair', text: 'American Shorthair', value: 'American Shorthair' },\n  { key: 'American Wirehair', text: 'American Wirehair', value: 'American Wirehair' },\n  { key: 'Balinese', text: 'Balinese', value: 'Balinese' },\n  { key: 'Bengal', text: 'Bengal', value: 'Bengal' },\n  { key: 'Birman', text: 'Birman', value: 'Birman' },\n  { key: 'Bombay', text: 'Bombay', value: 'Bombay' },\n  { key: 'British Shorthair', text: 'British Shorthair', value: 'British Shorthair' },\n  { key: 'Burmese', text: 'Burmese', value: 'Burmese' },\n  { key: 'Burmilla', text: 'Burmilla', value: 'Burmilla' },\n  { key: 'Chartreux', text: 'Chartreux', value: 'Chartreux' },\n  { key: 'Colorpoint Shorthair', text: 'Colorpoint Shorthair', value: 'Colorpoint Shorthair' },\n  { key: 'Cornish Rex', text: 'Cornish Rex', value: 'Cornish Rex' },\n  { key: 'Devon Rex', text: 'Devon Rex', value: 'Devon Rex' },\n  { key: 'Domestic Short Hair', text: 'Domestic Short Hair', value: 'Domestic Short Hair' },\n  { key: 'Domestic Medium Hair', text: 'Domestic Medium Hair', value: 'Domestic Medium Hair' },\n  { key: 'Domestic Long Hair', text: 'Domestic Long Hair', value: 'Domestic Long Hair' },\n  { key: 'Egyptian Mau', text: 'Egyptian Mau', value: 'Egyptian Mau' },\n  { key: 'European Burmese', text: 'European Burmese', value: 'European Burmese' },\n  { key: 'Exotic', text: 'Exotic', value: 'Exotic' },\n  { key: 'Havana Brown', text: 'Havana Brown', value: 'Havana Brown' },\n  { key: 'Japanese Bobtail', text: 'Japanese Bobtail', value: 'Japanese Bobtail' },\n  { key: 'Khao Manee', text: 'Khao Manee', value: 'Khao Manee' },\n  { key: 'Korat', text: 'Korat', value: 'Korat' },\n  { key: 'LaPerm', text: 'LaPerm', value: 'LaPerm' },\n  { key: 'Lykoi', text: 'Lykoi', value: 'Lykoi' },\n  { key: 'Maine Coon Cat', text: 'Maine Coon Cat', value: 'Maine Coon Cat' },\n  { key: 'Manx', text: 'Manx', value: 'Manx' },\n  { key: 'Norwegian Forest Cat', text: 'Norwegian Forest Cat', value: 'Norwegian Forest Cat' },\n  { key: 'Ocicat', text: 'Ocicat', value: 'Ocicat' },\n  { key: 'Oriental', text: 'Oriental', value: 'Oriental' },\n  { key: 'Persian', text: 'Persian', value: 'Persian' },\n  { key: 'RagaMuffin', text: 'RagaMuffin', value: 'RagaMuffin' },\n  { key: 'Ragdoll', text: 'Ragdoll', value: 'Ragdoll' },\n  { key: 'Russian Blue', text: 'Russian Blue', value: 'Russian Blue' },\n  { key: 'Scottish Fold', text: 'Scottish Fold', value: 'Scottish Fold' },\n  { key: 'Selkirk Rex', text: 'Selkirk Rex', value: 'Selkirk Rex' },\n  { key: 'Siamese', text: 'Siamese', value: 'Siamese' },\n  { key: 'Siberian', text: 'Siberian', value: 'Siberian' },\n  { key: 'Singapura', text: 'Singapura', value: 'Singapura' },\n  { key: 'Somali', text: 'Somali', value: 'Somali' },\n  { key: 'Sphynx', text: 'Sphynx', value: 'Sphynx' },\n  { key: 'Tonkinese', text: 'Tonkinese', value: 'Tonkinese' },\n  { key: 'Toybob', text: 'Toybob', value: 'Toybob' },\n  { key: 'Turkish Angora', text: 'Turkish Angora', value: 'Turkish Angora' },\n  { key: 'Turkish Van', text: 'Turkish Van', value: 'Turkish Van' },\n]\n\nexport const dogBreedOption = [\n  {key: \"Affenpinscher\", text: \"Affenpinscher\", value: \"Affenpinscher\"},\n  {key: \"Afghan Hound\", text: \"Afghan Hound\", value: \"Afghan Hound\"},\n  {key: \"Airdale Terrier\", text: \"Airdale Terrier\", value: \"Airdale Terrier\"},\n  {key: \"Akita\", text: \"Akita\", value: \"Akita\"},\n  {key: \"Alaskan Malamute\", text: \"Alaskan Malamute\", value: \"Alaskan Malamute\"},\n  {key: \"American Eskimo\", text: \"American Eskimo\", value: \"American Eskimo\"},\n  {key: \"American Foxhound\", text: \"American Foxhound\", value: \"American Foxhound\"},\n  {key: \"American Staffordshire Terrier\", text: \"American Staffordshire Terrier\", value: \"American Staffordshire Terrier\"},\n  {key: \"American Water Spaniel\", text: \"American Water Spaniel\", value: \"American Water Spaniel\"},\n  {key: \"Anatolian Sheepdog\", text: \"Anatolian Sheepdog\", value: \"Anatolian Sheepdog\"},\n  {key: \"Australian Cattle Dog\", text: \"Australian Cattle Dog\", value: \"Australian Cattle Dog\"},\n  {key: \"Australian Shepherd\", text: \"Australian Shepherd\", value: \"Australian Shepherd\"},\n  {key: \"Australian Terrier\", text: \"Australian Terrier\", value: \"Australian Terrier\"},\n  {key: \"Basenji\", text: \"Basenji\", value: \"Basenji\"},\n  {key: \"Basset Hound\", text: \"Basset Hound\", value: \"Basset Hound\"},\n  {key: \"Beagle\", text: \"Beagle\", value: \"Beagle\"},\n  {key: \"Bearded Collie\", text: \"Bearded Collie\", value: \"Bearded Collie\"},\n  {key: \"Beauceron\", text: \"Beauceron\", value: \"Beauceron\"},\n  {key: \"Bedlington Terrier\", text: \"Bedlington Terrier\", value: \"Bedlington Terrier\"},\n  {key: \"Belgian Malinois\", text: \"Belgian Malinois\", value: \"Belgian Malinois\"},\n  {key: \"Belgian Sheepdog\", text: \"Belgian Sheepdog\", value: \"Belgian Sheepdog\"},\n  {key: \"Belgian Tervuren\", text: \"Belgian Tervuren\", value: \"Belgian Tervuren\"},\n  {key: \"Bernese Mountain Dog\", text: \"Bernese Mountain Dog\", value: \"Bernese Mountain Dog\"},\n  {key: \"Bichon Frise\", text: \"Bichon Frise\", value: \"Bichon Frise\"},\n  {key: \"Black And Tan Coonhound\", text: \"Black And Tan Coonhound\", value: \"Black And Tan Coonhound\"},\n  {key: \"Black Russian Terrier\", text: \"Black Russian Terrier\", value: \"Black Russian Terrier\"},\n  {key: \"Bloodhound\", text: \"Bloodhound\", value: \"Bloodhound\"},\n  {key: \"Border Collie\", text: \"Border Collie\", value: \"Border Collie\"},\n  {key: \"Border Terrier\", text: \"Border Terrier\", value: \"Border Terrier\"},\n  {key: \"Borzoi\", text: \"Borzoi\", value: \"Borzoi\"},\n  {key: \"Boston Terrier\", text: \"Boston Terrier\", value: \"Boston Terrier\"},\n  {key: \"Bouvier Des Flandres\", text: \"Bouvier Des Flandres\", value: \"Bouvier Des Flandres\"},\n  {key: \"Boxer\", text: \"Boxer\", value: \"Boxer\"},\n  {key: \"Briard\", text: \"Briard\", value: \"Briard\"},\n  {key: \"Brittany\", text: \"Brittany\", value: \"Brittany\"},\n  {key: \"Brussels Griffon\", text: \"Brussels Griffon\", value: \"Brussels Griffon\"},\n  {key: \"Bull Dog\", text: \"Bull Dog\", value: \"Bull Dog\"},\n  {key: \"Bull Terrier\", text: \"Bull Terrier\", value: \"Bull Terrier\"},\n  {key: \"Bullmastiff\", text: \"Bullmastiff\", value: \"Bullmastiff\"},\n  {key: \"Cairn Terrier\", text: \"Cairn Terrier\", value: \"Cairn Terrier\"},\n  {key: \"Canaan Dog\", text: \"Canaan Dog\", value: \"Canaan Dog\"},\n  {key: \"Cardigan Welsh Corgi\", text: \"Cardigan Welsh Corgi\", value: \"Cardigan Welsh Corgi\"},\n  {key: \"Cavalier King Charles Spaniel\", text: \"Cavalier King Charles Spaniel\", value: \"Cavalier King Charles Spaniel\"},\n  {key: \"Chesapeake Bay Retriever\", text: \"Chesapeake Bay Retriever\", value: \"Chesapeake Bay Retriever\"},\n  {key: \"Chihuahua\", text: \"Chihuahua\", value: \"Chihuahua\"},\n  {key: \"Chinese Crested\", text: \"Chinese Crested\", value: \"Chinese Crested\"},\n  {key: \"Chinese Shar Pei\", text: \"Chinese Shar Pei\", value: \"Chinese Shar Pei\"},\n  {key: \"Chow Chow\", text: \"Chow Chow\", value: \"Chow Chow\"},\n  {key: \"Clumber Spaniel\", text: \"Clumber Spaniel\", value: \"Clumber Spaniel\"},\n  {key: \"Cocker Spaniel-American\", text: \"Cocker Spaniel-American\", value: \"Cocker Spaniel-American\"},\n  {key: \"Cocker Spaniel-English\", text: \"Cocker Spaniel-English\", value: \"Cocker Spaniel-English\"},\n  {key: \"Collie\", text: \"Collie\", value: \"Collie\"},\n  {key: \"Coton de Tulear\", text: \"Coton de Tulear\", value: \"Coton de Tulear\"},\n  {key: \"Curly Coated Retriever\", text: \"Curly Coated Retriever\", value: \"Curly Coated Retriever\"},\n  {key: \"Dachshund\", text: \"Dachshund\", value: \"Dachshund\"},\n  {key: \"Dalmatian\", text: \"Dalmatian\", value: \"Dalmatian\"},\n  {key: \"Dandie Dinmont Terrier\", text: \"Dandie Dinmont Terrier\", value: \"Dandie Dinmont Terrier\"},\n  {key: \"Doberman Pinscher\", text: \"Doberman Pinscher\", value: \"Doberman Pinscher\"},\n  {key: \"English Foxhound\", text: \"English Foxhound\", value: \"English Foxhound\"},\n  {key: \"English Setter\", text: \"English Setter\", value: \"English Setter\"},\n  {key: \"English Springer Spaniel\", text: \"English Springer Spaniel\", value: \"English Springer Spaniel\"},\n  {key: \"English Toy Spaniel\", text: \"English Toy Spaniel\", value: \"English Toy Spaniel\"},\n  {key: \"Field Spaniel\", text: \"Field Spaniel\", value: \"Field Spaniel\"},\n  {key: \"Finnish Spitz\", text: \"Finnish Spitz\", value: \"Finnish Spitz\"},\n  {key: \"Flat Coated Retriever\", text: \"Flat Coated Retriever\", value: \"Flat Coated Retriever\"},\n  {key: \"Fox Terrier\", text: \"Fox Terrier\", value: \"Fox Terrier\"},\n  {key: \"French Bulldog\", text: \"French Bulldog\", value: \"French Bulldog\"},\n  {key: \"German Pinscher\", text: \"German Pinscher\", value: \"German Pinscher\"},\n  {key: \"German Shepherd Dog\", text: \"German Shepherd Dog\", value: \"German Shepherd Dog\"},\n  {key: \"German Shorthaired Pointer\", text: \"German Shorthaired Pointer\", value: \"German Shorthaired Pointer\"},\n  {key: \"German Wirehaired Pointer\", text: \"German Wirehaired Pointer\", value: \"German Wirehaired Pointer\"},\n  {key: \"Giant Schnauzer\", text: \"Giant Schnauzer\", value: \"Giant Schnauzer\"},\n  {key: \"Glen Imaal Terrier\", text: \"Glen Imaal Terrier\", value: \"Glen Imaal Terrier\"},\n  {key: \"Golden Retriever\", text: \"Golden Retriever\", value: \"Golden Retriever\"},\n  {key: \"Gordon Setter\", text: \"Gordon Setter\", value: \"Gordon Setter\"},\n  {key: \"Great Dane\", text: \"Great Dane\", value: \"Great Dane\"},\n  {key: \"Great Pyrenees\", text: \"Great Pyrenees\", value: \"Great Pyrenees\"},\n  {key: \"Great Swiss Mountain Dog\", text: \"Great Swiss Mountain Dog\", value: \"Great Swiss Mountain Dog\"},\n  {key: \"Greyhound\", text: \"Greyhound\", value: \"Greyhound\"},\n  {key: \"Harrier\", text: \"Harrier\", value: \"Harrier\"},\n  {key: \"Ibizan Hound\", text: \"Ibizan Hound\", value: \"Ibizan Hound\"},\n  {key: \"Irish Setter\", text: \"Irish Setter\", value: \"Irish Setter\"},\n  {key: \"Irish Terrier\", text: \"Irish Terrier\", value: \"Irish Terrier\"},\n  {key: \"Irish Water Spaniel\", text: \"Irish Water Spaniel\", value: \"Irish Water Spaniel\"},\n  {key: \"Irish Wolfhound\", text: \"Irish Wolfhound\", value: \"Irish Wolfhound\"},\n  {key: \"Italian Greyhound\", text: \"Italian Greyhound\", value: \"Italian Greyhound\"},\n  {key: \"Japanese Chin\", text: \"Japanese Chin\", value: \"Japanese Chin\"},\n  {key: \"Keeshond\", text: \"Keeshond\", value: \"Keeshond\"},\n  {key: \"Kerry Blue Terrier\", text: \"Kerry Blue Terrier\", value: \"Kerry Blue Terrier\"},\n  {key: \"Komondor\", text: \"Komondor\", value: \"Komondor\"},\n  {key: \"Kuvasz\", text: \"Kuvasz\", value: \"Kuvasz\"},\n  {key: \"Labrador Retriever\", text: \"Labrador Retriever\", value: \"Labrador Retriever\"},\n  {key: \"Lakeland Terrier\", text: \"Lakeland Terrier\", value: \"Lakeland Terrier\"},\n  {key: \"Maltese\", text: \"Maltese\", value: \"Maltese\"},\n  {key: \"Manchester Terrier (Standard)\", text: \"Manchester Terrier (Standard)\", value: \"Manchester Terrier (Standard)\"},\n  {key: \"Manchester Terrier (Toy)\", text: \"Manchester Terrier (Toy)\", value: \"Manchester Terrier (Toy)\"},\n  {key: \"Mastiff\", text: \"Mastiff\", value: \"Mastiff\"},\n  {key: \"Neopolitan Mastiff\", text: \"Neopolitan Mastiff\", value: \"Neopolitan Mastiff\"},\n  {key: \"Newfoundland\", text: \"Newfoundland\", value: \"Newfoundland\"},\n  {key: \"Norwegian Elkhound\", text: \"Norwegian Elkhound\", value: \"Norwegian Elkhound\"},\n  {key: \"Nova Scotia Duck Tolling Retriever\", text: \"Nova Scotia Duck Tolling Retriever\", value: \"Nova Scotia Duck Tolling Retriever\"},\n  {key: \"Old English Sheepdog\", text: \"Old English Sheepdog\", value: \"Old English Sheepdog\"},\n  {key: \"Otter Hound\", text: \"Otter Hound\", value: \"Otter Hound\"},\n  {key: \"Papillon\", text: \"Papillon\", value: \"Papillon\"},\n  {key: \"Petit Basset Griffon Vendeen\", text: \"Petit Basset Griffon Vendeen\", value: \"Petit Basset Griffon Vendeen\"},\n  {key: \"Pharaoh Hound\", text: \"Pharaoh Hound\", value: \"Pharaoh Hound\"},\n  {key: \"Plott Hound\", text: \"Plott Hound\", value: \"Plott Hound\"},\n  {key: \"Pointer\", text: \"Pointer\", value: \"Pointer\"},\n  {key: \"Polish Lowland Sheepdog\", text: \"Polish Lowland Sheepdog\", value: \"Polish Lowland Sheepdog\"},\n  {key: \"Pomeranian\", text: \"Pomeranian\", value: \"Pomeranian\"},\n  {key: \"Poodle Miniature\", text: \"Poodle Miniature\", value: \"Poodle Miniature\"},\n  {key: \"Poodle Standard\", text: \"Poodle Standard\", value: \"Poodle Standard\"},\n  {key: \"Poodle Toy\", text: \"Poodle Toy\", value: \"Poodle Toy\"},\n  {key: \"Portuguese Water Dog\", text: \"Portuguese Water Dog\", value: \"Portuguese Water Dog\"},\n  {key: \"Pug\", text: \"Pug\", value: \"Pug\"},\n  {key: \"Puli\", text: \"Puli\", value: \"Puli\"},\n  {key: \"Redbone Coonhound\", text: \"Redbone Coonhound\", value: \"Redbone Coonhound\"},\n  {key: \"Rhodesian Ridgeback\", text: \"Rhodesian Ridgeback\", value: \"Rhodesian Ridgeback\"},\n  {key: \"Rottweiler\", text: \"Rottweiler\", value: \"Rottweiler\"},\n  {key: \"Saint Bernard\", text: \"Saint Bernard\", value: \"Saint Bernard\"},\n  {key: \"Saluki\", text: \"Saluki\", value: \"Saluki\"},\n  {key: \"Samoyed\", text: \"Samoyed\", value: \"Samoyed\"},\n  {key: \"Schipperke\", text: \"Schipperke\", value: \"Schipperke\"},\n  {key: \"Scottish Deerhound\", text: \"Scottish Deerhound\", value: \"Scottish Deerhound\"},\n  {key: \"Scottish Terrier\", text: \"Scottish Terrier\", value: \"Scottish Terrier\"},\n  {key: \"Sealyham Terrier\", text: \"Sealyham Terrier\", value: \"Sealyham Terrier\"},\n  {key: \"Shetland Sheepdog\", text: \"Shetland Sheepdog\", value: \"Shetland Sheepdog\"},\n  {key: \"Shiba Inu\", text: \"Shiba Inu\", value: \"Shiba Inu\"},\n  {key: \"Shih Tzu\", text: \"Shih Tzu\", value: \"Shih Tzu\"},\n  {key: \"Siberian Husky\", text: \"Siberian Husky\", value: \"Siberian Husky\"},\n  {key: \"Silky Terrier\", text: \"Silky Terrier\", value: \"Silky Terrier\"},\n  {key: \"Skye Terrier\", text: \"Skye Terrier\", value: \"Skye Terrier\"},\n  {key: \"Soft-Coated Wheaten Terrier\", text: \"Soft-Coated Wheaten Terrier\", value: \"Soft-Coated Wheaten Terrier\"},\n  {key: \"Spinone Italiano\", text: \"Spinone Italiano\", value: \"Spinone Italiano\"},\n  {key: \"Staffordshire Bull Terrier\", text: \"Staffordshire Bull Terrier\", value: \"Staffordshire Bull Terrier\"},\n  {key: \"Standard Schnauzer\", text: \"Standard Schnauzer\", value: \"Standard Schnauzer\"},\n  {key: \"Sussex Spaniel\", text: \"Sussex Spaniel\", value: \"Sussex Spaniel\"},\n  {key: \"Tibetan Mastiff\", text: \"Tibetan Mastiff\", value: \"Tibetan Mastiff\"},\n  {key: \"Tibetan Spaniel\", text: \"Tibetan Spaniel\", value: \"Tibetan Spaniel\"},\n  {key: \"Tibetan Terrier\", text: \"Tibetan Terrier\", value: \"Tibetan Terrier\"},\n  {key: \"Toy Fox Terrier\", text: \"Toy Fox Terrier\", value: \"Toy Fox Terrier\"},\n  {key: \"Vizsla\", text: \"Vizsla\", value: \"Vizsla\"},\n  {key: \"Weimaraner\", text: \"Weimaraner\", value: \"Weimaraner\"},\n  {key: \"Welsh Springer Spaniel\", text: \"Welsh Springer Spaniel\", value: \"Welsh Springer Spaniel\"},\n  {key: \"Welsh Terrier\", text: \"Welsh Terrier\", value: \"Welsh Terrier\"},\n  {key: \"West Highland White Terrier\", text: \"West Highland White Terrier\", value: \"West Highland White Terrier\"},\n  {key: \"Whippet\", text: \"Whippet\", value: \"Whippet\"},\n  {key: \"Wirehaired Pointing Griffon\", text: \"Wirehaired Pointing Griffon\", value: \"Wirehaired Pointing Griffon\"},\n  {key: \"Yorkshire Terrier\", text: \"Yorkshire Terrier\", value: \"Yorkshire Terrier\"},\n]","/Users/jerry/Desktop/CS396-PetsFinder/client/src/frontend/component/SearchBox.js",[],"/Users/jerry/Desktop/CS396-PetsFinder/client/src/frontend/component/CheckBox.js",["83"],"import React, {Component} from 'react'\n\nclass CheckBox extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        const {toggle, range} = this.props;\n        return (\n            <div>\n                <input key={range.id} onChange={toggle} type=\"checkbox\" checked={range.isChecked} value={range.value} /> {range.value}\n            </div>\n          )\n    }\n}\n\nexport default CheckBox","/Users/jerry/Desktop/CS396-PetsFinder/client/src/firebase/firebase.js",[],{"ruleId":"84","severity":1,"message":"85","line":4,"column":8,"nodeType":"86","messageId":"87","endLine":4,"endColumn":15},{"ruleId":"88","severity":1,"message":"89","line":77,"column":47,"nodeType":"90","messageId":"91","endLine":77,"endColumn":49},{"ruleId":"84","severity":1,"message":"85","line":5,"column":8,"nodeType":"86","messageId":"87","endLine":5,"endColumn":15},{"ruleId":"92","severity":1,"message":"93","line":65,"column":17,"nodeType":"94","messageId":"95","endLine":65,"endColumn":27},{"ruleId":"92","severity":1,"message":"93","line":68,"column":17,"nodeType":"94","messageId":"95","endLine":68,"endColumn":27},{"ruleId":"92","severity":1,"message":"93","line":71,"column":17,"nodeType":"94","messageId":"95","endLine":71,"endColumn":27},{"ruleId":"92","severity":1,"message":"93","line":74,"column":17,"nodeType":"94","messageId":"95","endLine":74,"endColumn":27},{"ruleId":"92","severity":1,"message":"93","line":102,"column":17,"nodeType":"94","messageId":"95","endLine":102,"endColumn":27},{"ruleId":"92","severity":1,"message":"93","line":105,"column":17,"nodeType":"94","messageId":"95","endLine":105,"endColumn":27},{"ruleId":"92","severity":1,"message":"93","line":108,"column":17,"nodeType":"94","messageId":"95","endLine":108,"endColumn":27},{"ruleId":"92","severity":1,"message":"93","line":111,"column":17,"nodeType":"94","messageId":"95","endLine":111,"endColumn":27},{"ruleId":"88","severity":1,"message":"89","line":137,"column":47,"nodeType":"90","messageId":"91","endLine":137,"endColumn":49},{"ruleId":"84","severity":1,"message":"96","line":1,"column":8,"nodeType":"86","messageId":"87","endLine":1,"endColumn":13},{"ruleId":"97","severity":1,"message":"98","line":4,"column":5,"nodeType":"99","messageId":"100","endLine":6,"endColumn":6},"no-unused-vars","'history' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","'React' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor"]